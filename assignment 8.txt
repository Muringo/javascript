Write the destructing assignment that reads:
- 
`name` property into the variable `name`
-
 `years` property into the variable `age`
- 
`isStudent` property into the variable `isStudent` (false if absent)
         SOLUTION:

let user = {
 name: "Lucie Kamuyu",
 years: 20
};
let {name:name, years:age, isStudent = "absent"} = user;
   console.log(name, age, isStudent);

            //"Lucie Kamuyu"
              20
              "absent"


2. Rewrite with arrow functions
       SOLUTION:
let ask = (question, yes, no) =>{
  if (confirm(question)) yes()
  else no();
}
ask(
  "Do you agree?",
  ()=> { console.log("Yes i agree."); },
  ()=> { console.log("You denied the execution."); }
);
     
      //"Yes i agree."
        "You denied the execution."




HELLO,WORLD!
Js is a powerful language and can be used within any browser to write server-side code using node.js.
      Eg: console.log("Hello World!")
             //"Hello World!"

VARIABLES AND TYPES.
All variables are defined using the (var) keyword.
       Eg: var myNumber = 5;
           var myString = "Class LisaLab";
           var myBoolean = true;

            console.log(myNumber);
            console.log(myString);
            console.log(myBoolean);
                  //5
                    "Class LisaLab"
                    true

ARRAYS.
It also functions as a list.
      Eg: var myArray = [1,2,3];
         var SameArray = new Array(1,2,3);
         console.log(myArray);
             //[4, 5, 6]

     1.Addressing.
We use the bracket[] operator to address a specific cell in our array.
       Eg: var myArray = [1,2,3];
           console.log(myArray[1]);
                  //2
Arrays are sparse which means that we can also assign variables to random locations even if the previous was undefined.
        Eg: var myArray = [];
            myArray[6] = "Lucie"
            console.log(myArray);
                //[undefined, undefined, undefined, undefined, undefined, undefined, "Lucie"]
     2.Array Elements.
You can have different types of elements stored together in the same array.
         Eg: var myArray = ["Lucie", 10, {}];
             console.log(myArray);
                //["Lucie", 10, [object Object] { ... }]

MANIPULATING ARRAYS.
    Pushing and Popping.
The push and pop methods adds and removes variables from the end of an array.
         Eg: var myArray = [];
             myArray.push(1);
             myArray.push(10);
             myArray.push(100);
             console.log(myArray);
                  //[1, 10, 100]
             console.log(myArray.pop());
                 //100
             console.log(myArray);
                 //[1, 10]


QUEUES USING SHIFTING AND UNSHIFTING.
Shift and unshift methods are similar to push and pop only that they work on the beginning of an array.
We use them consecutively to utilize an array as a queue.
The shift keyword will remove variables of the array in the exact order they inserted.
           Eg: var myArray = [];
               myArray.push(1);
               myArray.push(10);
                console.log(myArray.shift());
                console.log(myArray.shift());
                     //1
                       10
The unshift method  is used to insert a variable at the beginning of an array.
          Eg: var myArray = [7,8,9];
              myArray.unshift(6); 
              console.log(myArray);
                   //[6, 7, 8, 9]


SPLICING.
It removes a certain part from an array to create a new array made up from the part we took out.
            Eg: var myArray = [0,1,2,3,4,5,6,7,8,9];
                var splice = myArray.splice(0,5);
                console.log(splice);
                    //[0, 1, 2, 3, 4]
                 console.log(myArray);
                    //[5, 6, 7, 8, 9]


OPERATORS.
  The Addition Operator.
It is both used in addition and concatenation of string.
      Eg: var a = 10;
          var b = 20;
          var c = a + b
          console.log(c);
             //30
Used for concatenating strings-strings, strings-numbers and numbers-strings.
         Eg: var name = "Lucie";
             console.log("Hello " + name);
                //"Hello Lucie"
When you try to add a number to a string, js will transform the number to a string before the concatenation.
         Eg: console.log("10" + 1);
                //"101"


MATHEMATICAL OPERATORS.
   Eg: console.log(6+2);
       console.log(6-2);
       console.log(6*2);
       console.log(6/2);
          //8
            4
            12
            3


CONDITIONS.
   The If Statement.
Allows us to check if an expression is equal to true or false and execute different code according to the result.
        Eg: if(confirm ("Do you know my name?")){
            console.log("What is my name?");
            } else {
            console.log("My name is Lucie");
            }
                //"What is my name?"
                  "My name is Lucie"


LOOPS.
  The For Statement.
It has three parts:1.Initialization-it initializes the variable i Eg. i=0;
                   2.Condition-as long as the condition is met the loop continues to execute Eg. i<3;
                   3.Increment-it increments the iterator Eg. i+1 or i++
It is used to iterate over an array and print out all of its members.
       
       Eg: var myArray = ["A", "B", "C"];
           for (i = 0; i < myArray.length; i++)
           {
            console.log(" myArray " +  i +  " is " + myArray[i]);
           }
                 //" myArray 0 is A"
                   " myArray 1 is B"
                   " myArray 2 is C"
   The While Statement.
It checks if an expression evaluates to true and runs long as it says true.
       Eg: var i = 4;
           while (i > 0)
           {
            console.log(i + " class LisaLab is the best ");
            i -= 1;
           }
             //"4 class LisaLab is the best "
               "3 class LisaLab is the best "
               "2 class LisaLab is the best "
               "1 class LisaLab is the best "
   Break And Continue Statements.
It allow us to stop the execution of a loop.
        Eg: var i = 3;
            while (true)
           { 
             console.log(i + " My name is awesome ");
             i -= 1;
             if (i == 0)
            {
             break;
            }
           }
                //"3 My name is awesome "
                  "2 My name is awesome "
                  "1 My name is awesome "
The continue statement skips the rest of the loop and jumps back to the beginning of the loop.
           Eg: for (var i = 0; i < 10; i++)
              {
                 if (i % 2 == 0)
               {
                 continue;
               }
                console.log(i + " is an odd number.");
              }   
                //"1 is an odd number."
                    "3 is an odd number."
                    "5 is an odd number."
                    "7 is an odd number."
                    "9 is an odd number."


OBJECTS.
To initialize a project we use curly braces.
       Eg: var emptyObject = {};
           var personObject = {
           firstName : "Lucie",
           lastName : "Kamuyu"
          }
           console.log(personObject);
                //[object Object] {
                   firstName: "Lucie",
                   lastName: "Kamuyu"
                   }
Member Addressing.



               




































